#!/usr/bin/env bash

set -e
set -o pipefail
set -o nounset

###
# Print error into STDERR
###
error() {
    echo "$@" 1>&2
}

###
# Only version from 3.5.0 and above have Linux binaries
###
get_supported_version() {
  if [ "Linux" = "$(uname)" ]; then
    echo "3.5"
  else
    echo "1.0"
  fi
}

###
# Check version is supported on the current platform
###
check_supported_version() {
    local IFS=.
    local requested=($1)
    local supported_version=""
    supported_version=$(get_supported_version)
    if [ -z "${supported_version}" ]; then
        return 1
    fi
    local supported=(${supported_version})
    if ((${requested[0]} < ${supported[0]})); then
        return 1
    fi
    if ((${requested[0]} > ${supported[0]})); then
        return 0
    fi
    if ((${requested[1]} < ${supported[1]})); then
        return 1
    fi
    return 0
}

# https://github.com/Banno/asdf-hashicorp/blob/master/bin/list-all
list_all() {
  local versions=""
  local tag_name
  local version
  local url="https://api.github.com/repos/99designs/aws-vault/releases"

  # cURL arguments
  declare -a args=()
  args+=("--silent")
  if [ -n "${GITHUB_API_TOKEN}" ]; then
    args+=('-H' "Authorization: token ${GITHUB_API_TOKEN}")
  fi
  args+=("${url}")

  # get all release tags
  local releases=""
  releases=$(curl "${args[@]}" | grep -o -E '"tag_name": "v[^"]*"' | sed 's/ //g')
  for version in ${releases}; do
    version="${version/\"tag_name\":/}"
    version="${version//\"/}"
    version="${version/v/}"
    # not all versions are supported on Linux
    if check_supported_version ${version}; then
      if [[ -z "${versions}" ]]; then
        versions="${version}"
      else
        versions="${version} ${versions}"
      fi
    fi
  done
  echo "${versions}"
}

command -v curl >/dev/null || { error "curl not found"; exit 1; }

list_all
